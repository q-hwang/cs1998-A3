---
- name: Deploying your A2
  hosts: all
  remote_user: root
  become: true
  become_method: sudo
  environment:
    LC_ALL: en_US.UTF-8
    LANG: en_US.UTF-8
    LANGUAGE: en_US.UTF-8
  vars:
      repository_git_path: https://github.com/q-hwang/cs1998-A2
      repository_path: /home/vagrant/cs1998-A2
      DB_USERNAME: newuser
      DB_PASSWORD: a
      DB_NAME: pobe_a2_db
      DB_HOST: localhost
      APP_SETTINGS: config.ProductionConfig
  tasks:
    - name: Install necessary packages
      apt: update_cache=yes name={{ item }} state=present
      with_items:
        - libatlas-base-dev
        - gfortran
        - g++
        - build-essential
        - libssl-dev
        - libffi-dev
        - python-dev
        - libmysqlclient-dev
        - mysql-server
        - libpq-dev
        - git
        - python-pip
        - nginx
        - python-numpy
        - python-scipy
        - gridsite-clients
    - name: Check if directory exists
      stat: path='{{ repository_path }}'
      register: cloned
    - name: Pull application repo
      command: chdir='{{ repository_path }}' git pull origin master
      when: cloned.stat.exists
    - name: Get updated files from git repository
      git:
        repo: '{{ repository_git_path }}'
        dest: '{{ repository_path }}'
      when: cloned.stat.exists == false
    - name: Install pip requirements
      command: pip install -r {{ repository_path }}/src/requirements.txt
    - name: Copy Upstart configuration
      template: src=upstart.service dest=/etc/systemd/system/upstart.service
    - name: install python mysql bindings
      apt: name=python-mysqldb state=installed
      become: yes
      become_method: sudo
    - name: Create a new database with name {{ DB_NAME }}
      mysql_db:
        name: '{{ DB_NAME }}'
        state: present
    - name: Create database user that you have defined above
      mysql_user: user={{ DB_USERNAME }} password={{ DB_PASSWORD }} priv=*.*:ALL state=present
    - name: Check if migration exists
      stat: path={{ repository_path }}/src/migrations
      register: migrations   
    - name: Run initialization script
      command: python manage.py db init  
      environment:
        DB_USERNAME: '{{ DB_USERNAME }}'
        DB_PASSWORD: '{{ DB_PASSWORD }}'
        DB_NAME: '{{ DB_NAME }}'
        DB_HOST: '{{ DB_HOST }}'
        APP_SETTINGS: '{{ APP_SETTINGS }}'
      args:
        chdir: '{{ repository_path }}/src/'
      when: migrations.stat.exists == false
    - name: Run migrations script
      command: python manage.py db migrate
      environment:
        DB_USERNAME: '{{ DB_USERNAME }}'
        DB_PASSWORD: '{{ DB_PASSWORD }}'
        DB_NAME: '{{ DB_NAME }}'
        DB_HOST: '{{ DB_HOST }}'
        APP_SETTINGS: '{{ APP_SETTINGS }}'
      args:
        chdir: '{{ repository_path }}/src/'
      when: migrations.stat.exists == false  
    - name: Run upgrade script
      command: python manage.py db upgrade
      environment:
        DB_USERNAME: '{{ DB_USERNAME }}'
        DB_PASSWORD: '{{ DB_PASSWORD }}'
        DB_NAME: '{{ DB_NAME }}'
        DB_HOST: '{{ DB_HOST }}'
        APP_SETTINGS: '{{ APP_SETTINGS }}'
      args:
        chdir: '{{ repository_path }}/src/'
    - name: Make sure our server is running
      systemd: state=started name=upstart
    - name: Copy Nginx site values
      template: src=a3.nginx.j2 dest=/etc/nginx/sites-enabled/a3
      notify:
        - restart nginx
    - name: Remove any default sites
      file: path=/etc/nginx/sites-enabled/default state=absent
      notify:
        - restart nginx
    - name: Remove any default sites
      file: path=/etc/nginx/sites-available/default state=absent
      notify:
        - restart nginx
    - name: Make sure nginx is running
      service: name=nginx state=started
  handlers:
    - name: restart nginx
      service: name=nginx state=restarted